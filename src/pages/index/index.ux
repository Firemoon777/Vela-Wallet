<template>
  <div class="page">
    <list class="list">
      <list-item class="header" type="item"></list-item>
      <list-item for="row in data" class="row" type="item">
          <div class="left-item" if="row.length > 0" @click="handleClick(row[0])">
            <image if="row[0].icon" src="/common/cards/{{row[0].icon}}.png" />
            <text if="row[0].title" class="text-card" style="background-color: #{{row[0].color}};">
              {{row[0].title}}
            </text>
          </div>
          <div class="right-item" if="row.length > 1" @click="handleClick(row[1])">
            <image if="row[1].icon" src="/common/cards/{{row[1].icon}}.png" />
            <text if="row[1].title" class="text-card" style="background-color: #{{row[1].color}};">
              {{row[1].title}}
            </text>
          </div>
      </list-item>
      <list-item class="footer" type="item"></list-item>
    </list>
  </div>
</template>

<script>
import router from "@system.router"
import {CardStorage} from "../../utils/storage"

export default {
  private: {
    raw: [],
    storage: null
  },
  computed: {
    data() {
      let computed_result = [...this.raw];
      computed_result.push({icon: "action_new", url: "pages/NewCardPicker"});
      computed_result.push({icon: "action_info", url: "pages/AboutScreen"});
      return computed_result.reduce((result, value, index, array) => {
        if(index % 2 === 0) {
          result.push(array.slice(index, index + 2))
        }
        return result;
      }, [])
    }
  },
  handleClick(item) {
    if(item.url) {
      router.push({
        uri: item.url,
        params: {}
      })
    } else {
      router.push({
        uri: "pages/CardView",
        params: {
          filename: item.filename,
          format: item.format,
          content: item.content,
          index: item.index,
          width: item.width ? item.width : null,
          height: item.height ? item.height : null
        }
      })
    }
    
  },
  onCardsLoad(payload) {
    this.raw = payload;
  },
  onInit() {
    this.storage = new CardStorage()
    this.storage.load(this.onCardsLoad)
  },
  onShow() {
    this.storage.load(this.onCardsLoad)
  },
}
</script>

<style>
.page {
  flex-direction: column;
  justify-content: center;
  align-items: center;
  background-color: black;
}

.list {
  margin-top: 96px;
  width: 192px;
  height: 298px;
}

.row {
  width: 192px;
  height: 69px;
  justify-content: center;
}

.list {
    width: 192px;
    height: 490px;
  }
  
  .row {
    width: 192px;
    height: 69px;
    justify-content: space-between;
    margin-bottom: 8px;
  }
  
  .left-item {
    width: 92px;
    height: 69px;
  }

  .right-item {
    width: 92px;
    height: 69px;
    margin-left: 8px;
  }

  .text-card {
    width: 92px;
    height: 69px;
    background-color: #111111;
    color: #ffffff;
    text-align: center;
    font-size: 18px;
    border-radius: 10px;
  }

.header {
    width: 192px;
    height: 48px;
  }

  .footer {
    width: 192px;
    height: 32px;
  }
</style>
